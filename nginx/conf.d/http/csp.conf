# With Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# 
# This generic (and somewhat basic) policy assumes:
#    - All resources are hosted by the same domain of the document
#    - There are no inlines or evals for scripts and style resources
#    - There is no need for other websites to frame the website
#    - There are no form-submissions to external websites
#    - There are no mixed-content requests
#
# This header specifically configures:
#   - default-src 'self': sets default source fallback mechanism to same origin (same scheme and domain name)
#   - object-src 'none': disallows the loading of any plugin content, such as Flash or Java applets. prevent potential vulnerabilities associated with plugins
#   - frame-ancestors 'self': allows embedding the page only on the same origin, mitigating clickjacking
#   - form-action 'self': allows forms to be submitted only to the same origin, mitigating CSFR
#   - require-trusted-types-for 'script': Enforces Trusted Types for scripts. Helps mitigate cross-site scripting (XSS) attacks by allowing only trusted sources to execute scripts
#   - upgrade-insecure-requests: automatically upgrade insecure (HTTP) requests to secure (HTTPS) requests, mitigating man-in-the-middles
#   - block-all-mixed-content: prevents loading of mixed (HTTP and HTTPS) content
#
#
# Note: csp configuration can (and shouold) go much deeper than this, for more:
#         - https://content-security-policy.com
#         - https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
#         - https://www.w3.org/TR/CSP3
#         - https://csp.withgoogle.com/docs/adopting-csp.html
#         - https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html
#
add_header Content-Security-Policy "default-src 'self'; object-src 'none'; frame-ancestors 'self'; form-action 'self'; require-trusted-types-for 'script'; upgrade-insecure-requests; block-all-mixed-content" always;
